{
    "collab_server" : "",
    "contents" : "# main2\n\n## Preparation\n\n### read path \n# source(\"\\\\\\\\center/Client/Prospects/Quaras/05_data/09_集計/20_アンケートデータ集計/Rコード/code/\")\ncode_path <- \"\\\\\\\\center/Client/Prospects/Quaras/05_data/09_集計/20_アンケートデータ集計/Rコード/code\"\ndata_path <- \"\\\\\\\\center/Client/Prospects/Quaras/05_data/09_集計/20_アンケートデータ集計/dat\"\nresult_path <- \"\\\\\\\\center/Client/Prospects/Quaras/05_data/09_集計/20_アンケートデータ集計/result\"\n\n### read library \n# setwd(code_path)\n# source(\"library.R\")\n#library--------------------\nlibrary(gridExtra)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(data.table)\nlibrary(readxl)\nlibrary(rstan)\n\n# install.packages('readxl')\nlibrary(readxl)\n\n# install.packages(\"xlsx\")\n# library(xlsx)\n\n# install.packages('rJava')\n# library(rJava)\n\n#install.packages(\"rex\")\nlibrary(rex)\n\nfread2     <- function(filename){fread(filename, data.table = F, stringsAsFactors = F) %>% as_tibble()}\nfread2utf8 <- function(filename){fread(filename, data.table = F, stringsAsFactors = F, encoding = \"UTF-8\") %>% as_tibble()}\n\n\n### set parameter\n# source(\"global.R\")\nvalue_col <- c(\"q1_ninti\", \"q2_pre_ninti\", \"q3_kyomi_kanshin\", \"q4_kokan\", \"q5_riyo_iko\", \"q6_suisyo_iko\")\ngnd_age <- c(\"01teen\", \"02男性20代\", \"03男性30代\", \"04男性40代\", \"05男性50代\", \"06男性60代\", \"07女性20代\", \"08女性30代\", \"09女性40代\", \"10女性50代\", \"11女性60代\")\n\n### define function\n# source(\"cuans.R\")\n# count up answer each questions\ncuans <- function(q, d){\n  switch(q,\n         # q1 : count up answer 1, 2, 3\n         sum(d <= 3),\n         # q2 : count up answer 9, 10, 11, 12, 13\n         sum(d >= 9),\n         # q3 : count up answer 1, 2\n         sum(d <= 2),\n         # q4 : count up answer 1, 2\n         sum(d <= 2),\n         # q5 : count up answer 1, 2\n         sum(d <= 2),\n         # q6 : count up answer 1, 2\n         sum(d <= 2)\n  )\n}\n\n# source(\"ctg_dup.R\")\nctg_dup <- function(data, split){\n  setwd(data_path)\n  gax <- read.csv(data, header = F) %>% as.tibble()\n  gax_ctg <- NULL\n  for(k in 1:dim(gax)[1]){\n    gax_ctg <- c(gax_ctg, (gax[k,2] %>% as.matrix() %>% strsplit(split) %>% unlist())[1])\n  }\n  d = gax_ctg[!duplicated(gax_ctg)] %>% tibble()\n  colnames(d) <- \"ctg\"\n  d\n}\n\n# source(\"get_data.R\")\nget_data <- function(ex_result, q, exc, gp, i){\n  switch(q,\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>% \n             mutate(q1_ninti = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q1_ninti))\n           # print(ex_result)\n         }else{\n           ex_result <- ex_result %>%\n             mutate(q1_ninti = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q1_ninti))\n           # print(ex_result)\n         },\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>%\n             mutate(q2_pre_ninti = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q2_pre_ninti))\n           # print(ex_result)\n         }else{\n           ex_result <- ex_result %>%\n             mutate(q2_pre_ninti = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q2_pre_ninti))\n           # print(ex_result)\n         },\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>% \n             mutate(q3_kyomi_kanshin = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q3_kyomi_kanshin))\n         }else{\n           ex_result <- ex_result %>% \n             mutate(q3_kyomi_kanshin = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q3_kyomi_kanshin))\n         },\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>% \n             mutate(q4_kokan = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q4_kokan))\n         }else{\n           ex_result <- ex_result %>% \n             mutate(q4_kokan = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q4_kokan))\n         },\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>% \n             mutate(q5_riyo_iko = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q5_riyo_iko))\n         }else{\n           ex_result <- ex_result %>% \n             mutate(q5_riyo_iko = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q5_riyo_iko))\n         },\n         \n         if(dim(exc)[1] == 0){\n           ex_result <- ex_result %>% \n             mutate(q6_suisyo_iko = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(NA), q6_suisyo_iko))\n         }else{\n           ex_result <- ex_result %>% \n             mutate(q6_suisyo_iko = if_else(gp_br == as.factor(paste(gp, \"_\", i, sep = \"\")), as.double(cuans(q, exc) / 100), q6_suisyo_iko))\n         }\n  )\n}\n\n\n## make result data frame\n\n### read ctg_brand.csv & reshape it\nsetwd(data_path)\nctg_brand <- read.csv(\"ctg_brand.csv\") %>% as.tibble()\nnum_ctg <- substr(as.matrix(ctg_brand[, 1]), 1, 2)\nnum_brand <- substr(as.matrix(ctg_brand[, 3]), 1, 2)\ncolnames(num_brand) <- \"num_brand\"\nctg_brand[, 1] <- substr(as.matrix(ctg_brand[, 1]), 3, nchar(as.matrix(ctg_brand[, 1])))\nbrand <- substr(as.matrix(ctg_brand[, 3]), 3, nchar(as.matrix(ctg_brand[, 3])))\nctg_brand <- cbind(num_ctg, ctg_brand, brand)\nctg_brand[, 4] <- num_brand\ncolnames(ctg_brand) <- c(\"num_ctg\", \"ctg\", \"company\", \"num_brand\", \"brand\")\nlen_cb <- dim(ctg_brand)[1]\n\n### set gender age file names\ndata_ga_list <- c(\"data201711_ga.csv\", \"data201712_ga.csv\") # optional\n\n### dupricated category labels in each monthly files\nga11_ctg_dup <- ctg_dup(data_ga_list[1], \"／\") \nga12_ctg_dup <- ctg_dup(data_ga_list[2], \"／\")\nga_ctg_dup_list <- rbind(ga11_ctg_dup, ga12_ctg_dup)\n\n### read category lables\nga11 <- read.csv(data_ga_list[1], header = F) %>% as.tibble()\nga12 <- read.csv(data_ga_list[2], header = F) %>% as.tibble()\nga_list <- rbind(ga11, ga12)\nlen_galist <- dim(ga_list)[1]\n\n### split string & extract category names\nstr_galist <- matrix(0, len_galist, 3)\nfor(j in 1:3){\n  for(i in 1:len_galist){\n    str_galist[i, j] <- unlist(strsplit(as.matrix(ga_list[i, 2]),\"／\"))[j]\n  }\n}  \nga_list <- cbind(ga_list[, 1], str_galist)\ncolnames(ga_list) <- c(\"id\", \"ctg\", \"sex\", \"age\")\nga_list <- as.tibble(ga_list)\nlen_galist <- dim(ga_list)[1]\nncols_galist <- dim(ga_list)[2]\n### count rows(sex & age) from each ctg\nrowcount_mat <- ga_list %>% group_by(ctg) %>% summarise(n())\ncolnames(rowcount_mat) <- c(\"ctg\", \"n\")\n\n### make rowcount matrix by month\nrowcount_mat <- rowcount_mat %>%\n  mutate(ctg = as.character(ctg))\nrowcount_mat_11 <- left_join(ga11_ctg_dup, rowcount_mat, by = \"ctg\")\nrowcount_mat_12 <- left_join(ga12_ctg_dup, rowcount_mat, by = \"ctg\")\nrowcount_mat_list <- list(rowcount_mat_11, rowcount_mat_12)\n\n### make keys\nga_ctg_bra <- matrix(0, 20 * len_galist, 4) %>% as.tibble() # 20 is numeber of questions \n\naccum_rc <- NULL\nfor(m in 1:8){\n  rowcount1 <- (rowcount_mat %>% filter(ctg == (ga_ctg_dup_list %>% as.matrix())[m]))[1,2] %>% as.integer()\n  accum_rc <- sum(accum_rc, rowcount1)\n  for(l in 1:ncols_galist){\n    ga_ctg_bra[((accum_rc - rowcount1) * 20  + 1) : (accum_rc * 20), l] <- rep(as.matrix(ga_list[(accum_rc - rowcount1 + 1) : accum_rc, l]), length =  20 * rowcount1) # attention to arithmetic \n    # print(c((((accum_rc - rowcount1) * 20  + 1) ), (accum_rc * 20), (accum_rc - rowcount1 + 1), accum_rc, 20 * rowcount1))\n  }\n}\nv1 <- NULL\nfor(k in 1:len_cb){\n  rowcount2 <- rowcount_mat[as.matrix(rowcount_mat[\"ctg\"]) == as.matrix(ctg_brand[k, 2])[1], 2] %>% as.integer()\n  v1 <- rbind(v1, t(matrix(rep(as.matrix(ctg_brand[k, ]), rowcount2), 5, rowcount2)))\n}\nkeys <- cbind(ga_ctg_bra, v1)[, -2] %>% as.tibble()\ncolnames(keys) <- c(\"group\", \"gender\", \"age\", \"num_ctg\", \"ctg\", \"company\", \"num_brand\", \"brand\" )\nkeys <- keys %>%\n  mutate(num_ctg = as.numeric(num_ctg)) %>% \n  mutate(num_brand = as.numeric(num_brand)) %>% ## conver num_ctg and num_brand to numeric\n  mutate(gp_br = paste(group, \"_\", num_brand, sep = \"\")) ## make col group + num_brand\nlen_keys <- dim(keys)[1]\nvalue <- matrix(0, len_keys, 6) %>% as.tibble()\ncolnames(value) <- value_col\nresult <- keys %>% bind_cols(value)\n\n## set ctg array\nv_ctg <- c(\"a\", \"b\", \"c\", \"d\")\n\n## make data list\ndata_list <- c(\"data201711.csv\", \"data201712.csv\") # optional\nlen_dl <- length(data_list)\n\n## sparate keys by month\nkeys11 <- keys %>% filter(ctg %in% as.vector(as.matrix(ga11_ctg_dup)))\nkeys12 <- keys %>% filter(ctg %in% as.vector(as.matrix(ga12_ctg_dup)))\nkeys_list <- list(keys11, keys12) # length(keys_list) == len_dl > TRUE\n\n## sparate result by month\nresult11 <- result %>% filter(ctg %in% as.vector(as.matrix(ga11_ctg_dup)))\nresult12 <- result %>% filter(ctg %in% as.vector(as.matrix(ga12_ctg_dup)))\nresult_list <- list(result11, result12)\n\n## column name as variable\ngroup <- \"group\"\nnum_ctg <- \"num_ctg\" \nnum_brand <- \"num_brand\"\ngp_br <- \"gp_br\"\n\nfor(l in 1:len_dl){\n  ## read data\n  setwd(data_path)\n  ex_data <- read.csv(data_list[l]) %>% as.tibble()\n  ex_keys <- keys_list[[l]]\n  ex_result <- result_list[[l]]\n  ex_rowcount_mat <- rowcount_mat_list[[l]]\n  cn_data <- ex_data %>% colnames()\n  len_id <- (ex_data %>% dim())[1] ### number of id\n  len_keys <- (ex_keys %>% dim())[1] ### number of keys\n  len_rowcount_mat <- (ex_rowcount_mat %>% dim())[1] ### number of rowcount mat \n  accum_rc3 <- NULL\n  \n  ## make vector for rowcount\n  rca <- as.integer(ex_rowcount_mat[1, 2])\n  rcb <- as.integer(ex_rowcount_mat[2, 2])\n  rcc <- as.integer(ex_rowcount_mat[3, 2])\n  rcd <- as.integer(ex_rowcount_mat[4, 2])\n  v_rc <- c(rca, rcb, rcc, rcd)\n  cs_v_rc <- c(0, cumsum(v_rc)) # accumulation\n  \n  for(k in 1:len_keys){\n    # extra rows by group\n    ex_data_k <- ex_data %>% filter(group == as.integer(ex_keys[\"group\"][k, ]))\n    gp <- as.integer(ex_keys[\"group\"][k, ])  \n    \n    if(gp > cs_v_rc[1] && gp <= cs_v_rc[2]){\n      j <- 1\n    }else if(gp > cs_v_rc[2]  && gp <= cs_v_rc[3]){\n      j <- 2\n    }else if(gp > cs_v_rc[3] && gp <= cs_v_rc[4]){\n      j <- 3\n    }else if(gp > cs_v_rc[4] && gp <= cs_v_rc[5]){\n      j <- 4\n    }else{\n      print(\"groupが見つかりません\")\n    }\n    \n    ## loop each ctg\n    ctg <- v_ctg[j]\n    # q = 2 ; i = 1\n    print(gp)\n    for(q in 1:6){\n      for(i in 1:20){\n        cname <- paste(ctg, \"q\", q, \"_\", i, sep = \"\")\n        exc <- ex_data_k %>% select_(cname) %>% na.omit()\n        ex_result <- get_data(ex_result, q, exc, gp, i)\n      }\n    }\n  }\n  if(l == 1){\n    ex_result11 <- ex_result \n  }else if(l == 2){\n    ex_result12 <- ex_result\n  }else{\n    print(\"コードを書き直しましょう\")\n  }\n}\nresult_all <- bind_rows(ex_result11, ex_result12)\n  \n# write result\nsetwd(result_path)\ngetwd()\nwrite.csv(result_all, \"アンケート集計結果.csv\")\n\n",
    "created" : 1517460883734.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3726160480",
    "id" : "EDAC5F33",
    "lastKnownWriteTime" : 1517569917,
    "last_content_update" : 1517569917222,
    "path" : "//center/Client/Prospects/Quaras/05_data/09_集計/20_アンケートデータ集計/Rコード/code/main2.R",
    "project_path" : "main2.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}